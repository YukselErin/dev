<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->
{% set type_ids = {
  'excel': 150,
  'integer': 7,
  'short_text': 12,
  'number': 4
} %}
<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->
{% for complexVar in complexVariables %}
  {{ var.name }}
  {{ var.type }}
{% endfor %}

<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->
{% for var in variables %}
  {{ var.id }}
  {{ var.name }}
  {{ var.type_id }}
  {% if var.is_complex %}
    {{ var.type_name }}
  {% else %}
    {{ var.type_id }}
  {% endif %}
{% endfor %}




<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->
{% for step in steps %}
<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->
  {% if step.step_action is defined and
      step.step_action.class == "AssignVariable" %}
    {{ step.id }}
    {{ step.name }}
    {%if
      step.step_action.assignment_type == "expression"%}
    {{ step.step_action.value }}
    {% elif step.step_action.assignment_type == "value" %}
      {{ step.step_action.value }}
      {% elif step.step_action.assignment_type == "converters" %}
        {% for converter in converters %}
          {{converter(converter.type, converter.value)}}
        {% endfor %}
      {% endif %}
      {{step.enabled}}
    {% endif %}

    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->

    {% if step.class == "End" %}
      {{ step.id }}
    {% endif %}

    <!--This enables opening an excel file given as an excel variable-->

    {% if
      step.step_action is defined and step.step_action.class == "OpenVariable" %}
    {{ step.id }}
    {{ step.name }}
    {% if
      step.step_action.variable.idref %}
    {{ step.step_action.variable.idref }}
    {% else %}
    {{ step.step_action.variable.name }}
  {% endif %}
  {% if step.enabled_idref %}
    {{ step.enabled_idref }}
    {% else %}
    {{
      step.enabled }}
  {% endif %}
{% endif %}

<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->

{% if step.step_action is defined
      and step.step_action.class == "CallRobot2Step" %}
  {{ step.id }}
  {{ step.name }}
  {{ step.step_action.robot2_name }}
  {% for rv in
      step.step_action.return_variables %}
    {% if rv.idref %}
      {{ rv.idref }}
      {% else %}
      {{ rv.name }}
    {% endif %}
  {% endfor %}
  {{ step.error_handler.reporting_via_api |
      default(false) | lower }}
  {{
      step.error_handler.reporting_via_log | default(false) | lower }}
  {% if
      step.error_handler.control_flow %}
  {{ step.error_handler.control_flow }}
{% endif %}
{% if step.comment is not none %}
  {{
      step.comment }}
  {% else %}
{% endif %}
{% if
      step.enabled_idref %}
{{ step.enabled_idref }}
{% else %}
{{ step.enabled | lower }}
{% endif %}
{% endif %}

<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->

{% if
      step.step_action is defined and step.step_action.class == "ExtractCell" %}
{{ step.id }}
{{ step.name }}
{% if step.element_finders.type == "specified_range"
      %}
  {{ step.element_finders.range }}
  {% if step.element_finders.column_type
      == "by_index" %}
    {{ step.element_finders.column_value }}
    {% elif step.element_finders.column_type == "by_header" %}
      {{ step.element_finders.column_value }}
    {% endif %}
    {% if step.element_finders.row_type == "by_index" %}
      {{ step.element_finders.row_value }}
      {% elif step.element_finders.row_type == "by_header" %}
        {{ step.element_finders.row_value }}
        {% if step.element_finders.row_range_name %}
          {{ step.element_finders.row_range_name }}
        {% endif %}
      {% endif %}
      {% elif
      step.element_finders.type == "named_range" %}
      {% if step.element_finders.range_name %}
        {{ step.element_finders.range_name }}
      {% endif %}
      {% if
      step.element_finders.column_type == "by_index" %}
      {{ step.element_finders.column_value }}
      {% elif step.element_finders.column_type == "by_header" %}
        {{ step.element_finders.column_value }}
      {% endif %}
      {% if step.element_finders.row_type == "by_index" %}
        {{ step.element_finders.row_value }}
        {% elif step.element_finders.row_type == "by_header" %}
          {{ step.element_finders.row_value }}
          {% if step.element_finders.row_range_name %}
            {{ step.element_finders.row_range_name }}
          {% endif %}
        {% endif %}
      {% endif %}
      {{ step.enabled | lower }}
    {% endif %}
    {% if step.class == "Try" %}
      {{ step.id }}
      {{ step.name }}
      {{ step.comment }}
    {%
      endif %}
    {% if step.class == "BranchPoint" %}
      {{ step.id }}
    {% endif %}
    <!--This runs an SQL query in a corrected database, and iterates through the results. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->

    {% if step.step_action is defined and step.step_action.class == "QueryDatabase2"
      %}
      {{ step.id }}
      {{ step.name }}
      {% if
      step.step_action.database.idref %}
      {{ step.step_action.database.idref }}
      {% else %}
      {{ step.step_action.database.name }}
    {% endif %}
    {{ step.step_action.sql }}
    {% for
      mapping in step.step_action.mappings %}
    {{ mapping.column }}
    {% if mapping.idref %}
      {{ mapping.idref }}
      {% else %}
      {{ mapping.name }}
    {% endif %}
  {% endfor %}
{% endif %}
<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->

{% if step.step_action is defined and step.step_action.class == "LoadFile" %}
  {{ step.id }}
  {{ step.step_action.fileNameExpression }}
  {{ step.step_action.output }}
{% endif %}
{% endfor %}
{% for edge in edges %}
  {{ edge.from }}
  {{ edge.to }}
{% endfor %}



{% macro converter(var) %}
{% if var.idref
  %}
  {{ var.idref }}
  {% else %}
  {{ var.name }}
{% endif %}
{% endmacro %}

 

Here is the type template;

<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->
{% set type_ids = {
  'excel': 150,
  'integer': 7,
  'short_text': 12,
  'number': 4
} %}

<?xml version="1.0" encoding="UTF-8" ?>
<object class="kapow.robot.common.domain.Type" serializationversion="0">
	<prologue>
		<saved-by-versions>
			<version>11.4.0.4</version>
		</saved-by-versions>
		<file-type>type</file-type>
	</prologue>
	<property name="attributes" class="kapow.robot.common.domain.Attributes">
  
    {%for var in varTypes%}
    <object class="kapow.robot.common.domain.Attribute" serializationversion="1">
      <property name="name" class="String">{{var.Name}}</property>
      <property name="type" class="kapow.robot.plugin.common.domain.StringAttributeType" id="0"/>
      <property name="recordFieldType" class="String" id="{{var.TypeID}}">{{var.TypeText}}</property>
    </object>
    {% endfor %}


    <object class="kapow.robot.common.domain.Attribute" serializationversion="1">
      <property name="name" class="String"><<+removeSpaces(Settings.CurrentColumnName)+>></property>
      <property name="type" idref="0"/>
      <property name="recordFieldType" idref="1"/>
    </object>
    
        </property>
</object>

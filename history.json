[
    {
        "query": "I have two jinja2 templates, use the first jinja template below by creating a single JSON to create a robot, use the second template that is used for types, to get complex types that can be used in the robot you made, similar to simple types. Here is what the robot should do;ROBOT HAS A VARIABLE A THAT IS A SHORT TEXT, READS THE FILE FROM FILE PATH FROM SHORT TEXT A, AND EXTRACTS THE RESULTING EXCEL'S COLUMNS A THROUGH F TO A COMPLEX TYPES VARIABLES NAMED THE SAME WAY.<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%\n      endif %}\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and iterates through the results. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n\n \n\nHere is the type template;\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>\n\n\nOutput ONLY a valid JSON array containing the resulting objects (e.g., [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]). No explanations or extra text. Put the robot JSON first, and the complex type json second.",
        "answer": "[{\"type_ids\":{\"excel\":150,\"integer\":7,\"short_text\":12,\"number\":4},\"complexVariables\":[],\"variables\":[{\"id\":\"var1\",\"name\":\"A\",\"type_id\":12,\"is_complex\":false},{\"id\":\"var2\",\"name\":\"myExcel\",\"type_id\":150,\"is_complex\":false},{\"id\":\"var3\",\"name\":\"extractedRow\",\"type_id\":null,\"is_complex\":true,\"type_name\":\"RowType\"}],\"steps\":[{\"id\":\"step1\",\"name\":\"Load the file\",\"step_action\":{\"class\":\"LoadFile\",\"fileNameExpression\":\"A\",\"output\":\"myExcel\"},\"enabled\":true},{\"id\":\"step2\",\"name\":\"Open Excel\",\"step_action\":{\"class\":\"OpenVariable\",\"variable\":{\"name\":\"myExcel\"}},\"enabled\":true},{\"id\":\"step3\",\"name\":\"Extract Column A\",\"step_action\":{\"class\":\"ExtractCell\",\"element_finders\":{\"type\":\"specified_range\",\"range\":\"A:F\",\"column_type\":\"by_header\",\"column_value\":\"A\",\"row_type\":\"by_index\",\"row_value\":1},\"output\":{\"name\":\"extractedRow.A\"}},\"enabled\":true},{\"id\":\"step4\",\"name\":\"Extract Column B\",\"step_action\":{\"class\":\"ExtractCell\",\"element_finders\":{\"type\":\"specified_range\",\"range\":\"A:F\",\"column_type\":\"by_header\",\"column_value\":\"B\",\"row_type\":\"by_index\",\"row_value\":1},\"output\":{\"name\":\"extractedRow.B\"}},\"enabled\":true},{\"id\":\"step5\",\"name\":\"Extract Column C\",\"step_action\":{\"class\":\"ExtractCell\",\"element_finders\":{\"type\":\"specified_range\",\"range\":\"A:F\",\"column_type\":\"by_header\",\"column_value\":\"C\",\"row_type\":\"by_index\",\"row_value\":1},\"output\":{\"name\":\"extractedRow.C\"}},\"enabled\":true},{\"id\":\"step6\",\"name\":\"Extract Column D\",\"step_action\":{\"class\":\"ExtractCell\",\"element_finders\":{\"type\":\"specified_range\",\"range\":\"A:F\",\"column_type\":\"by_header\",\"column_value\":\"D\",\"row_type\":\"by_index\",\"row_value\":1},\"output\":{\"name\":\"extractedRow.D\"}},\"enabled\":true},{\"id\":\"step7\",\"name\":\"Extract Column E\",\"step_action\":{\"class\":\"ExtractCell\",\"element_finders\":{\"type\":\"specified_range\",\"range\":\"A:F\",\"column_type\":\"by_header\",\"column_value\":\"E\",\"row_type\":\"by_index\",\"row_value\":1},\"output\":{\"name\":\"extractedRow.E\"}},\"enabled\":true},{\"id\":\"step8\",\"name\":\"Extract Column F\",\"step_action\":{\"class\":\"ExtractCell\",\"element_finders\":{\"type\":\"specified_range\",\"range\":\"A:F\",\"column_type\":\"by_header\",\"column_value\":\"F\",\"row_type\":\"by_index\",\"row_value\":1},\"output\":{\"name\":\"extractedRow.F\"}},\"enabled\":true},{\"id\":\"step9\",\"class\":\"End\"}],\"edges\":[{\"from\":\"step1\",\"to\":\"step2\"},{\"from\":\"step2\",\"to\":\"step3\"},{\"from\":\"step3\",\"to\":\"step4\"},{\"from\":\"step4\",\"to\":\"step5\"},{\"from\":\"step5\",\"to\":\"step6\"},{\"from\":\"step6\",\"to\":\"step7\"},{\"from\":\"step7\",\"to\":\"step8\"},{\"from\":\"step8\",\"to\":\"step9\"}]},{\"type_ids\":{\"excel\":150,\"integer\":7,\"short_text\":12,\"number\":4},\"varTypes\":[{\"Name\":\"A\",\"TypeID\":12,\"TypeText\":\"short_text\"},{\"Name\":\"B\",\"TypeID\":12,\"TypeText\":\"short_text\"},{\"Name\":\"C\",\"TypeID\":12,\"TypeText\":\"short_text\"},{\"Name\":\"D\",\"TypeID\":12,\"TypeText\":\"short_text\"},{\"Name\":\"E\",\"TypeID\":12,\"TypeText\":\"short_text\"},{\"Name\":\"F\",\"TypeID\":12,\"TypeText\":\"short_text\"}]}]"
    },
    {
        "query": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nFew-shot example:\nInput description: \"Robot opens an excel and loops through the rows.\"\nOutput JSON array:\n[\n{\n\"robot_name\": \"Excel_Extract_to_Database_Robot\",\n\"type_ids\": {\n\"excel\": 150,\n\"integer\": 7,\n\"short_text\": 12,\n\"number\": 4\n},\n\"variables\": [\n{\n\"id\": \"var_1\",\n\"name\": \"ExcelFilePath\",\n\"type_id\": 12,\n\"is_complex\": false\n},\n{\n\"id\": \"var_2\",\n\"name\": \"InputExcel\",\n\"type_id\": 150,\n\"is_complex\": false\n},\n{\n\"id\": \"var_3\",\n\"name\": \"CellValue\",\n\"type_id\": 12,\n\"is_complex\": false\n},\n{\n\"id\": \"var_4\",\n\"name\": \"DatabaseConnection\",\n\"type_id\": 12,\n\"is_complex\": false\n}\n],\n\"steps\": [\n{\n\"id\": \"step_1_load\",\n\"name\": \"Load_Excel_File\",\n\"class\": \"LoadFile\",\n\"step_action\": {\n\"class\": \"LoadFile\",\n\"fileNameExpression\": \"{{ ExcelFilePath }}\",\n\"output\": \"var_2\"\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_2_open\",\n\"name\": \"Open_Excel\",\n\"class\": \"OpenVariable\",\n\"step_action\": {\n\"class\": \"OpenVariable\",\n\"variable\": {\n\"idref\": \"var_2\"\n}\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_3_extract\",\n\"name\": \"Extract_First_Cell\",\n\"class\": \"ExtractCell\",\n\"step_action\": {\n\"class\": \"ExtractCell\",\n\"output\": \"var_3\"\n},\n\"element_finders\": {\n\"type\": \"specified_range\",\n\"range\": \"A1\",\n\"column_type\": \"by_index\",\n\"column_value\": \"1\",\n\"row_type\": \"by_index\",\n\"row_value\": \"1\"\n},\n\"enabled\": \"true\"\n},\n\n{\n\"id\": \"step_2_5\",\n\"name\": \"Loop_Through_Rows\",\n\"class\": \"LoopInExcel\",\n\"step_action\": {\n\"class\": \"LoopInExcel\"\n},\n\"element_finders\": {\n\"type\": \"specified_range\",\n\"range\": \"A1:A10\",\n\"offset\": 0\n},\n\"enabled\": \"true\"\n},\n\n\n{\n\"id\": \"step_4_insert\",\n\"name\": \"Insert_to_Database\",\n\"class\": \"QueryDatabase2\",\n\"step_action\": {\n\"class\": \"QueryDatabase2\",\n\"database\": {\n\"idref\": \"var_4\"\n},\n\"sql\": \"INSERT INTO extracted_data (cell_value) VALUES ({{ CellValue }})\",\n\"mappings\": []\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_5_end\",\n\"name\": \"End\",\n\"class\": \"End\"\n}\n],\n\"edges\": [\n{\n\"from\": \"step_1_load\",\n\"to\": \"step_2_open\"\n},\n{\n\"from\": \"step_2_open\",\n\"to\": \"step_n_loop\"\n},\n{\n\"from\": \"step_n_loop\",\n\"to\": \"step_3_extract\"\n},\n{\n\"from\": \"step_3_extract\",\n\"to\": \"step_4_insert\"\n},\n{\n\"from\": \"step_4_insert\",\n\"to\": \"step_5_end\"\n}\n]\n},\n{}  // Empty types if no complex needed\n]Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE.Output ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "answer": "Unexpected 200 response (possible mid-processing error): Upstream error from OpenInference: Error from model endpoint\nFull body: {\n  \"error\": {\n    \"message\": \"Upstream error from OpenInference: Error from model endpoint\",\n    \"code\": 502,\n    \"metadata\": {\n      \"provider_name\": \"OpenInference\"\n    }\n  },\n  \"user_id\": \"user_2zhGPQVpF30tBiEkAdEI0n7FTWV\"\n}"
    },
    {
        "query": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nFew-shot example:\nInput description: \"Robot opens an excel and loops through the rows.\"\nOutput JSON array:\n[\n{\n\"robot_name\": \"Excel_Extract_to_Database_Robot\",\n\"type_ids\": {\n\"excel\": 150,\n\"integer\": 7,\n\"short_text\": 12,\n\"number\": 4\n},\n\"variables\": [\n{\n\"id\": \"var_1\",\n\"name\": \"ExcelFilePath\",\n\"type_id\": 12,\n\"is_complex\": false\n},\n{\n\"id\": \"var_2\",\n\"name\": \"InputExcel\",\n\"type_id\": 150,\n\"is_complex\": false\n},\n{\n\"id\": \"var_3\",\n\"name\": \"CellValue\",\n\"type_id\": 12,\n\"is_complex\": false\n},\n{\n\"id\": \"var_4\",\n\"name\": \"DatabaseConnection\",\n\"type_id\": 12,\n\"is_complex\": false\n}\n],\n\"steps\": [\n{\n\"id\": \"step_1_load\",\n\"name\": \"Load_Excel_File\",\n\"class\": \"LoadFile\",\n\"step_action\": {\n\"class\": \"LoadFile\",\n\"fileNameExpression\": \"{{ ExcelFilePath }}\",\n\"output\": \"var_2\"\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_2_open\",\n\"name\": \"Open_Excel\",\n\"class\": \"OpenVariable\",\n\"step_action\": {\n\"class\": \"OpenVariable\",\n\"variable\": {\n\"idref\": \"var_2\"\n}\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_3_extract\",\n\"name\": \"Extract_First_Cell\",\n\"class\": \"ExtractCell\",\n\"step_action\": {\n\"class\": \"ExtractCell\",\n\"output\": \"var_3\"\n},\n\"element_finders\": {\n\"type\": \"specified_range\",\n\"range\": \"A1\",\n\"column_type\": \"by_index\",\n\"column_value\": \"1\",\n\"row_type\": \"by_index\",\n\"row_value\": \"1\"\n},\n\"enabled\": \"true\"\n},\n\n{\n\"id\": \"step_2_5\",\n\"name\": \"Loop_Through_Rows\",\n\"class\": \"LoopInExcel\",\n\"step_action\": {\n\"class\": \"LoopInExcel\"\n},\n\"element_finders\": {\n\"type\": \"specified_range\",\n\"range\": \"A1:A10\",\n\"offset\": 0\n},\n\"enabled\": \"true\"\n},\n\n\n{\n\"id\": \"step_4_insert\",\n\"name\": \"Insert_to_Database\",\n\"class\": \"QueryDatabase2\",\n\"step_action\": {\n\"class\": \"QueryDatabase2\",\n\"database\": {\n\"idref\": \"var_4\"\n},\n\"sql\": \"INSERT INTO extracted_data (cell_value) VALUES ({{ CellValue }})\",\n\"mappings\": []\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_5_end\",\n\"name\": \"End\",\n\"class\": \"End\"\n}\n],\n\"edges\": [\n{\n\"from\": \"step_1_load\",\n\"to\": \"step_2_open\"\n},\n{\n\"from\": \"step_2_open\",\n\"to\": \"step_n_loop\"\n},\n{\n\"from\": \"step_n_loop\",\n\"to\": \"step_3_extract\"\n},\n{\n\"from\": \"step_3_extract\",\n\"to\": \"step_4_insert\"\n},\n{\n\"from\": \"step_4_insert\",\n\"to\": \"step_5_end\"\n}\n]\n},\n{}  // Empty types if no complex needed\n]Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE.Output ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "answer": "\n\n[\n  {\n    \"robot_name\": \"Excel_Columns_To_Database_Robot\",\n    \"type_ids\": {\n      \"excel\": 150,\n      \"integer\": 7,\n      \"short_text\": 12,\n      \"number\": 4\n    },\n    \"variables\": [\n      {\n        \"id\": \"var_1\",\n        \"name\": \"FilePath\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": \"var_2\",\n        \"name\": \"InputExcel\",\n        \"type_id\": 150,\n        \"is_complex\": false\n      },\n      {\n        \"id\": \"var_3\",\n        \"name\": \"Column1Value\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": \"var_4\",\n        \"name\": \"Column7Value\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": \"var_5\",\n        \"name\": \"DatabaseConnection\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"steps\": [\n      {\n        \"id\": \"step_1_load\",\n        \"name\": \"Load_Excel_File\",\n        \"class\": \"LoadFile\",\n        \"step_action\": {\n          \"class\": \"LoadFile\",\n          \"fileNameExpression\": \"{{ FilePath }}\",\n          \"output\": \"var_2\"\n        },\n        \"enabled\": \"true\"\n      },\n      {\n        \"id\": \"step_2_open\",\n        \"name\": \"Open_Excel\",\n        \"class\": \"OpenVariable\",\n        \"step_action\": {\n          \"class\": \"OpenVariable\",\n          \"variable\": {\n            \"idref\": \"var_2\"\n          }\n        },\n        \"enabled\": \"true\"\n      },\n      {\n        \"id\": \"step_3_loop\",\n        \"name\": \"Loop_Through_Rows\",\n        \"class\": \"LoopInExcel\",\n        \"step_action\": {\n          \"class\": \"LoopInExcel\"\n        },\n        \"element_finders\": {\n          \"type\": \"specified_range\",\n          \"range\": \"A:G\",\n          \"offset\": 0\n        },\n        \"enabled\": \"true\"\n      },\n      {\n        \"id\": \"step_4_extract1\",\n        \"name\": \"Extract_Column_1\",\n        \"class\": \"ExtractCell\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"output\": \"var_3\"\n        },\n        \"element_finders\": {\n          \"type\": \"specified_range\",\n          \"column_type\": \"by_index\",\n          \"column_value\": \"1\",\n          \"row_type\": \"current\"\n        },\n        \"enabled\": \"true\"\n      },\n      {\n        \"id\": \"step_5_extract7\",\n        \"name\": \"Extract_Column_7\",\n        \"class\": \"ExtractCell\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"output\": \"var_4\"\n        },\n        \"element_finders\": {\n          \"type\": \"specified_range\",\n          \"column_type\": \"by_index\",\n          \"column_value\": \"7\",\n          \"row_type\": \"current\"\n        },\n        \"enabled\": \"true\"\n      },\n      {\n        \"id\": \"step_6_insert\",\n        \"name\": \"Insert_to_Database\",\n        \"class\": \"QueryDatabase2\",\n        \"step_action\": {\n          \"class\": \"QueryDatabase2\",\n          \"database\": {\n            \"idref\": \"var_5\"\n          },\n          \"sql\": \"INSERT INTO extracted_data (col1, col7) VALUES ('{{ Column1Value }}', '{{ Column7Value }}')\",\n          \"mappings\": []\n        },\n        \"enabled\": \"true\"\n      },\n      {\n        \"id\": \"step_7_end\",\n        \"name\": \"End\",\n        \"class\": \"End\"\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": \"step_1_load\",\n        \"to\": \"step_2_open\"\n      },\n      {\n        \"from\": \"step_2_open\",\n        \"to\": \"step_3_loop\"\n      },\n      {\n        \"from\": \"step_3_loop\",\n        \"to\": \"step_4_extract1\"\n      },\n      {\n        \"from\": \"step_4_extract1\",\n        \"to\": \"step_5_extract7\"\n      },\n      {\n        \"from\": \"step_5_extract7\",\n        \"to\": \"step_6_insert\"\n      },\n      {\n        \"from\": \"step_6_insert\",\n        \"to\": \"step_7_end\"\n      }\n    ]\n  },\n  {}\n]"
    },
    {
        "date": "2025-10-13T21:57:30.531652",
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "model_source": "OpenRouter",
        "query": "THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE",
        "llm_output": "\n\nTo create a robot that reads columns 1 and 7 from an Excel file and saves them to a database, follow these steps. This implementation uses Python with `pandas` for Excel operations and `sqlite3` for the database.\n\n### Solution Code:\n```python\nimport pandas as pd\nimport sqlite3\n\n# Variable A (replace with your Excel file path)\nfile_path = \"your_file.xlsx\"\n\ntry:\n    # Read the Excel file (assuming first row is a header)\n    df = pd.read_excel(file_path)\n    \n    # Select columns 1 and 7 (indices 0 and 6 in zero-based)\n    selected_data = df.iloc[:, [0, 6]]\n    \n    # Connect to SQLite database (creates/connects to 'database.db')\n    conn = sqlite3.connect('database.db')\n    \n    # Save selected data to a table named 'extracted_data'\n    # (replace existing data each time; use 'append' to keep history)\n    selected_data.to_sql(\n        'extracted_data', \n        conn, \n        if_exists='replace', \n        index=False\n    )\n    \n    print(\"Data saved to database successfully.\")\n\nexcept FileNotFoundError:\n    print(f\"Error: The file '{file_path}' does not exist.\")\nexcept pd.errors.EmptyDataError:\n    print(\"Error: The Excel file is empty.\")\nexcept IndexError:\n    print(\"Error: The Excel file does not have enough columns.\")\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {str(e)}\")\n\nfinally:\n    if 'conn' in locals():\n        conn.close()  # Ensure connection closes even if errors occur\n```\n\n### Key Steps Explained:\n1. **Read the Excel File**:  \n   Uses `pd.read_excel()` to load the Excel file into a DataFrame (`df`).\n\n2. **Column Selection**:  \n   `df.iloc[:, [0, 6]]` selects columns **1 and 7** (based on zero-based indexing, where `0` = first column and `6` = seventh column).\n\n3. **Database Connection**:  \n   Connects to a SQLite database (`database.db`). Replace this with your preferred database (e.g., PostgreSQL, MySQL) by changing the connection string.\n\n4. **Save to Database**:  \n   `to_sql()` writes the data to the `extracted_data` table, replacing previous data (`if_exists='replace'`). Use `if_exists='append'` to add new entries instead.\n\n### Usage Notes:\n- **Excel Headers**: Assumes the first row contains headers. Remove `header=0` in `pd.read_excel()` if your file has no headers.\n- **Database Customization**:\n  - For **MySQL/PostgreSQL**: Replace `sqlite3.connect(...)` with your database connector (e.g., `psycopg2` for PostgreSQL).\n  - **Table Schema**: Ensure the database table (`extracted_data`) has columns compatible with your Excel format (e.g., `TEXT`, `INTEGER`).\n- **Error Handling**: Basic exceptions are caught to handle common issues (e.g., missing file, empty data).\n\n### Example Output (SQLite Table):\nIf your Excel looks like this (headers: `Name`, `Age`, ...):\n\n| Name    | Age | ... | Salary ($) |\n|---------|-----|-----|------------|\n| Alice   | 30  | ... | 50000      |\n| Bob     | 25  | ... | 45000      |\n\nThe database table `extracted_data` will store:\n\n| Name    | Salary ($) |\n|---------|------------|\n| Alice   | 50000      |\n| Bob     | 45000      |",
        "xml_robot": null,
        "xml_type": null,
        "error": "Error: Failed to parse LLM output as JSON.",
        "templates": {
            "robot_template": "",
            "type_template": "",
            "simple_robot_template": "",
            "simple_type_template": ""
        }
    },
    {
        "date": "2025-10-13T21:59:56.159963",
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "model_source": "OpenRouter",
        "query": "THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE",
        "llm_output": "\n\nHere's a Python script that uses pandas and sqlite3 to accomplish the task. The solution reads the Excel file, extracts columns by position (1st and 7th), and saves them to an SQLite database:\n\n```python\nimport pandas as pd\nimport sqlite3\n\n# Assuming variable A contains the filepath string\nA = \"/path/to/your/excel_file.xlsx\"  # Replace with actual file path\n\n# Read Excel file (0-based column indices)\n# header=None option reads data without assuming headers\nexcel_data = pd.read_excel(A, header=None)\n\n# Select columns by position (columns 1 and 7 -> indices 0 and 6)\nselected_data = excel_data.iloc[:, [0, 6]]\n\n# Rename columns for database clarity (optional)\nselected_data.columns = ['Column1', 'Column7']\n\n# Create/connect to SQLite database\ndatabase_path = \"extracted_data.db\"\nconn = sqlite3.connect(database_path)\n\n# Save to database table (creates 'extracted_columns' table)\nselected_data.to_sql('extracted_columns', conn, if_exists='replace', index=False)\n\n# Close database connection\nconn.close()\n\nprint(\"Operation completed successfully!\")\nprint(f\"Data saved to: {database_path} | Table: extracted_columns\")\n```\n\n**Key components explained:**\n\n1. **Excel Handling:**\n   - `pd.read_excel()` loads spreadsheet data into a DataFrame\n   - `header=None` treats all rows as data (no header interpretation)\n\n2. **Column Selection:**\n   - `iloc[:, [0, 6]]` selects all rows (:) and specific columns (0 and 6)\n   - Column renaming improves database readability (optional)\n\n3. **Database Operations:**\n   - SQLite database created at specified path\n   - `to_sql()` creates table with extracted columns\n   - `if_exists='replace'` overwrites existing table (change to 'append' to keep history)\n\n**Adaptations for different scenarios:**\n\n1. **For Excel files WITH headers:**\n```python\n# Read with headers and select by column names\nexcel_data = pd.read_excel(A)\nselected_data = excel_data.iloc[:, [0, 6]]  # Still by position\n# OR if you know column names:\n# selected_data = excel_data[['ColumnName1', 'ColumnName7']]\n```\n\n2. **For MySQL/PostgreSQL instead of SQLite:**\n```python\n# Install required driver first (pip install mysql-connector-python/psycopg2)\nfrom sqlalchemy import create_engine\n\n# MySQL example\nengine = create_engine('mysql+mysqlconnector://user:password@localhost/dbname')\nselected_data.to_sql('table_name', engine, index=False)\n```\n\n**Requirements:**\n```bash\npip install pandas openpyxl sqlalchemy\n```\n\nThis implementation provides a balance between simplicity and robustness. For production use, consider adding:\n1. Error handling (try/except blocks)\n2. Parameter validation\n3. Database schema configuration\n4. Logging\n5. Environment variables for sensitive paths/credentials",
        "xml_robot": null,
        "xml_type": null,
        "error": "Error: Failed to parse LLM output as JSON.",
        "templates": {
            "robot_template": "",
            "type_template": "",
            "simple_robot_template": "",
            "simple_type_template": ""
        }
    },
    {
        "date": "2025-10-13T22:18:00.555857",
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "model_source": "OpenRouter",
        "query": "THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE",
        "llm_output": "\n\nHere's a Python solution using `pandas` for Excel handling and `sqlite3` for database operations. You can adapt this for other databases like MySQL/PostgreSQL:\n\n```python\n# Required libraries (install if missing: pip install pandas openpyxl)\nimport pandas as pd\nimport sqlite3\n\n# Assuming variable A contains the file path\nA = \"/path/to/your/excel_file.xlsx\"  # Replace with actual filepath\n\ntry:\n    # Read Excel file (open first sheet by default)\n    df = pd.read_excel(A, engine='openpyxl')\n    \n    # Select columns 1 (index 0) and 7 (index 6) by position\n    selected_data = df.iloc[:, [0, 6]]\n    \n    # Connect to SQLite database (replace with your DB connection)\n    conn = sqlite3.connect('database.db')\n    \n    # Save to database table (customize table/column names as needed)\n    selected_data.to_sql(\n        name='extracted_columns', \n        con=conn, \n        if_exists='replace',  # Options: 'fail', 'replace', 'append'\n        index=False\n    )\n    \n    print(f\"Successfully saved {len(selected_data)} rows to database!\")\n    \n    # Optional: Verify the saved data\n    print(pd.read_sql(\"SELECT * FROM extracted_columns LIMIT 5\", conn))\n\nexcept FileNotFoundError:\n    print(f\"Error: File not found at path '{A}'\")\nexcept Exception as e:\n    print(f\"Error occurred: {str(e)}\")\nfinally:\n    if 'conn' in locals():\n        conn.close()\n```\n\n**Key Components:**\n1. **Excel Handling:** Uses `pandas.read_excel()` with `openpyxl` engine\n2. **Column Selection:** `iloc[:, [0, 6]]` selects specific columns by position\n3. **Database Operation:** `to_sql()` handles table creation and data insertion\n\n**Customization Options:**\n- **Different Database:** Replace SQLite with any DB supported by SQLAlchemy\n  ```python\n  # Example for PostgreSQL\n  from sqlalchemy import create_engine\n  engine = create_engine('postgresql://user:password@localhost:5432/mydb')\n  selected_data.to_sql(..., con=engine)\n  ```\n- **Column Names:** Add `columns=['your', 'headers']` in `to_sql()` \n- **Data Types:** Specify `dtype` parameter in `to_sql()` for schema control\n- **Handling Existing Data:** Change `if_exists` parameter ('replace'/'append')\n\n**Prerequisite Packages:**\n```bash\npip install pandas openpyxl sqlalchemy\n```\n\nFor production use, consider adding:\n1. Explicit column name mapping\n2. Type validation/conversion\n3. Batch processing for large files\n4. Proper database connection management\n5. More detailed error handling\n6. Logging instead of print statements",
        "xml_robot": null,
        "xml_type": null,
        "error": "Error: Failed to parse LLM output as JSON.",
        "templates": null
    },
    {
        "date": "2025-10-14T21:54:51.187070",
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "model_source": "OpenRouter",
        "query": "THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE",
        "llm_output": "\n\n[\n  {\n    \"variables\": [\n      {\n        \"id\": 1,\n        \"name\": \"A\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 2,\n        \"name\": \"excelVar\",\n        \"type_id\": 150,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 3,\n        \"name\": \"column1Data\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 4,\n        \"name\": \"column7Data\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"steps\": [\n      {\n        \"id\": 1,\n        \"name\": \"Load Excel File\",\n        \"step_action\": {\n          \"class\": \"LoadFile\",\n          \"fileNameExpression\": \"A\",\n          \"output\": \"excelVar\"\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Open Excel\",\n        \"step_action\": {\n          \"class\": \"OpenVariable\",\n          \"variable\": {\n            \"idref\": 2\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Extract Column 1\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"column_type\": \"by_index\",\n            \"column_value\": 1,\n            \"row_type\": \"by_index\",\n            \"row_value\": 1\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Extract Column 7\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"column_type\": \"by_index\",\n            \"column_value\": 7,\n            \"row_type\": \"by_index\",\n            \"row_value\": 1\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 5,\n        \"name\": \"Save to Database\",\n        \"step_action\": {\n          \"class\": \"QueryDatabase2\",\n          \"database\": {\n            \"name\": \"exampleDB\"\n          },\n          \"sql\": \"INSERT INTO data (col1, col7) VALUES (?, ?)\",\n          \"mappings\": [\n            {\n              \"column\": 1,\n              \"idref\": 3\n            },\n            {\n              \"column\": 2,\n              \"idref\": 4\n            }\n          ]\n        },\n        \"enabled\": true\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": 1,\n        \"to\": 2\n      },\n      {\n        \"from\": 2,\n        \"to\": 3\n      },\n      {\n        \"from\": 3,\n        \"to\": 4\n      },\n      {\n        \"from\": 4,\n        \"to\": 5\n      }\n    ]\n  },\n  {\n    \"varTypes\": []\n  }\n]",
        "xml_robot": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables>  </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        \n        -->\n  <property name=\"variables\" class=\"Variables\">  </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\">  </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\">  </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n",
        "xml_type": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    \n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>",
        "error": null,
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    },
    {
        "date": "2025-10-14T22:03:45.124783",
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "model_source": "OpenRouter",
        "query": "THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE",
        "llm_output": "\n\n[\n  {\n    \"variables\": [\n      {\n        \"id\": 1,\n        \"name\": \"A\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 2,\n        \"name\": \"excel_var\",\n        \"type_id\": 150,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 3,\n        \"name\": \"col1_var\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 4,\n        \"name\": \"col7_var\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"complexVariables\": [],\n    \"steps\": [\n      {\n        \"id\": 1,\n        \"name\": \"Load Excel File\",\n        \"step_action\": {\n          \"class\": \"LoadFile\",\n          \"fileNameExpression\": \"A\",\n          \"output\": {\n            \"idref\": 2\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Open Excel\",\n        \"step_action\": {\n          \"class\": \"OpenVariable\",\n          \"variable\": {\n            \"idref\": 2\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Loop through rows\",\n        \"step_action\": {\n          \"class\": \"LoopInExcel\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"range\": \"1:1048576\"\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Extract Column 1\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"column_type\": \"by_index\",\n            \"column_value\": 1,\n            \"row_type\": \"by_index\"\n          },\n          \"output\": {\n            \"idref\": 3\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 5,\n        \"name\": \"Extract Column 7\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"column_type\": \"by_index\",\n            \"column_value\": 7,\n            \"row_type\": \"by_index\"\n          },\n          \"output\": {\n            \"idref\": 4\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 6,\n        \"name\": \"Save to Database\",\n        \"step_action\": {\n          \"class\": \"QueryDatabase2\",\n          \"sql\": \"INSERT INTO Data (Column1, Column7) VALUES (?, ?)\",\n          \"mappings\": [\n            {\n              \"column\": \"Column1\",\n              \"idref\": 3\n            },\n            {\n              \"column\": \"Column7\",\n              \"idref\": 4\n            }\n          ]\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 7,\n        \"class\": \"End\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": 1, \"to\": 2},\n      {\"from\": 2, \"to\": 3},\n      {\"from\": 3, \"to\": 4},\n      {\"from\": 4, \"to\": 5},\n      {\"from\": 5, \"to\": 6},\n      {\"from\": 6, \"to\": 3},\n      {\"from\": 3, \"to\": 7}\n    ]\n  },\n  {\n    \"varTypes\": []\n  }\n]",
        "xml_robot": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables>  </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        \n        -->\n  <property name=\"variables\" class=\"Variables\">  </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\">  </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\">  </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n",
        "xml_type": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    \n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>",
        "error": null,
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    },
    {
        "date": "2025-10-14T22:35:10.394585",
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "model_source": "OpenRouter",
        "query": "THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE",
        "prompt": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nRobot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASEOutput ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "llm_output": "\n\n[\n  {\n    \"variables\": [\n      {\n        \"id\": 1,\n        \"name\": \"A\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 2,\n        \"name\": \"excel_var\",\n        \"type_id\": 150,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 3,\n        \"name\": \"var_col1\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 4,\n        \"name\": \"var_col7\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"complexVariables\": [],\n    \"steps\": [\n      {\n        \"id\": 1,\n        \"name\": \"Load Excel File\",\n        \"step_action\": {\n          \"class\": \"LoadFile\",\n          \"fileNameExpression\": \"A\",\n          \"output\": \"excel_var\"\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Open Excel\",\n        \"step_action\": {\n          \"class\": \"OpenVariable\",\n          \"variable\": {\n            \"idref\": 2\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Extract Column 1\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"column_type\": \"by_index\",\n            \"column_value\": \"1\",\n            \"row_type\": \"by_index\",\n            \"row_value\": \"1\"\n          }\n        },\n        \"output_variable\": {\n          \"idref\": 3\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Extract Column 7\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"column_type\": \"by_index\",\n            \"column_value\": \"7\",\n            \"row_type\": \"by_index\",\n            \"row_value\": \"1\"\n          }\n        },\n        \"output_variable\": {\n          \"idref\": 4\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 5,\n        \"name\": \"Save to Database\",\n        \"step_action\": {\n          \"class\": \"CallRobot2Step\",\n          \"robot2_name\": \"DatabaseSaver\",\n          \"return_variables\": []\n        },\n        \"error_handler\": {\n          \"reporting_via_api\": false,\n          \"reporting_via_log\": true\n        },\n        \"enabled\": true\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": 1,\n        \"to\": 2\n      },\n      {\n        \"from\": 2,\n        \"to\": 3\n      },\n      {\n        \"from\": 3,\n        \"to\": 4\n      },\n      {\n        \"from\": 4,\n        \"to\": 5\n      }\n    ]\n  },\n  {\n    \"varTypes\": []\n  }\n]",
        "xml_robot": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables>  </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        \n        -->\n  <property name=\"variables\" class=\"Variables\">  </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\">  </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\">  </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n",
        "xml_type": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    \n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>",
        "error": null,
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    },
    {
        "date": "2025-10-14T22:42:51.717291",
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "model_source": "OpenRouter",
        "query": "THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE",
        "prompt": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nRobot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASEOutput ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "llm_output": "\n\n[\n    {\n        \"variables\": [\n            {\n                \"id\": \"var1\",\n                \"name\": \"A\",\n                \"type_id\": 12,\n                \"is_complex\": false\n            },\n            {\n                \"id\": \"var2\",\n                \"name\": \"excel\",\n                \"type_id\": 150,\n                \"is_complex\": false\n            },\n            {\n                \"id\": \"var3\",\n                \"name\": \"column1\",\n                \"type_id\": 12,\n                \"is_complex\": false\n            },\n            {\n                \"id\": \"var4\",\n                \"name\": \"column7\",\n                \"type_id\": 12,\n                \"is_complex\": false\n            }\n        ],\n        \"complexVariables\": [],\n        \"steps\": [\n            {\n                \"id\": \"step1\",\n                \"name\": \"Load Excel File\",\n                \"step_action\": {\n                    \"class\": \"LoadFile\",\n                    \"fileNameExpression\": \"A\",\n                    \"output\": \"excel\"\n                },\n                \"enabled\": true\n            },\n            {\n                \"id\": \"step2\",\n                \"name\": \"Open Excel\",\n                \"step_action\": {\n                    \"class\": \"OpenVariable\",\n                    \"variable\": {\n                        \"idref\": \"var2\"\n                    }\n                },\n                \"enabled\": true\n            },\n            {\n                \"id\": \"step3\",\n                \"name\": \"Extract Column 1\",\n                \"step_action\": {\n                    \"class\": \"ExtractCell\",\n                    \"element_finders\": {\n                        \"type\": \"specified_range\",\n                        \"column_type\": \"by_index\",\n                        \"column_value\": 1,\n                        \"row_type\": \"by_index\",\n                        \"row_value\": 1\n                    }\n                },\n                \"output\": \"var3\",\n                \"enabled\": true\n            },\n            {\n                \"id\": \"step4\",\n                \"name\": \"Extract Column 7\",\n                \"step_action\": {\n                    \"class\": \"ExtractCell\",\n                    \"element_finders\": {\n                        \"type\": \"specified_range\",\n                        \"column_type\": \"by_index\",\n                        \"column_value\": 7,\n                        \"row_type\": \"by_index\",\n                        \"row_value\": 1\n                    }\n                },\n                \"output\": \"var4\",\n                \"enabled\": true\n            },\n            {\n                \"id\": \"step5\",\n                \"name\": \"Save to Database\",\n                \"step_action\": {\n                    \"class\": \"QueryDatabase2\",\n                    \"database\": {\n                        \"name\": \"TargetDB\"\n                    },\n                    \"sql\": \"INSERT INTO Table (Col1, Col7) VALUES (?, ?)\",\n                    \"mappings\": [\n                        {\n                            \"column\": 1,\n                            \"idref\": \"var3\"\n                        },\n                        {\n                            \"column\": 2,\n                            \"idref\": \"var4\"\n                        }\n                    ]\n                },\n                \"enabled\": true\n            }\n        ],\n        \"edges\": [\n            {\n                \"from\": \"step1\",\n                \"to\": \"step2\"\n            },\n            {\n                \"from\": \"step2\",\n                \"to\": \"step3\"\n            },\n            {\n                \"from\": \"step3\",\n                \"to\": \"step4\"\n            },\n            {\n                \"from\": \"step4\",\n                \"to\": \"step5\"\n            }\n        ]\n    },\n    {\n        \"varTypes\": []\n    }\n]",
        "xml_robot": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables>  </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        \n        -->\n  <property name=\"variables\" class=\"Variables\">  </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\">  </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\">  </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n",
        "xml_type": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    \n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>",
        "error": null,
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    },
    {
        "date": "2025-10-14T22:47:16.084280",
        "model": "tngtech/deepseek-r1t2-chimera:free",
        "model_source": "OpenRouter",
        "query": "THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASE",
        "prompt": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nRobot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: THIS ROBOT HAS A SIMPLE VARIABLE A THAT CONTAINS A FILEPATH. OPEN THIS FILEPATH INTO A VARIABLE EXCEL AND OPEN THE EXCEL. GET THE COLUMNS 1 AND 7, AND SAVE THESE TO DATABASEOutput ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "llm_output": "\n\n[\n  {\n    \"variables\": [\n      {\n        \"id\": 1,\n        \"name\": \"A\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 2,\n        \"name\": \"ExcelVar\",\n        \"type_id\": 150,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Column1\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Column7\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 5,\n        \"name\": \"Database\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"complexVariables\": [],\n    \"steps\": [\n      {\n        \"id\": 1,\n        \"name\": \"Load Excel File\",\n        \"step_action\": {\n          \"class\": \"LoadFile\",\n          \"fileNameExpression\": \"A\",\n          \"output\": \"ExcelVar\"\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Open Excel\",\n        \"step_action\": {\n          \"class\": \"OpenVariable\",\n          \"variable\": {\n            \"name\": \"ExcelVar\"\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Loop Rows\",\n        \"step_action\": {\n          \"class\": \"LoopInExcel\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"range\": \"A:G\",\n            \"row_type\": \"by_index\"\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Extract Column 1\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"column_type\": \"by_index\",\n            \"column_value\": 1,\n            \"row_type\": \"current\"\n          },\n          \"output\": \"Column1\"\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 5,\n        \"name\": \"Extract Column 7\",\n        \"step_action\": {\n          \"class\": \"ExtractCell\",\n          \"element_finders\": {\n            \"type\": \"specified_range\",\n            \"column_type\": \"by_index\",\n            \"column_value\": 7,\n            \"row_type\": \"current\"\n          },\n          \"output\": \"Column7\"\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 6,\n        \"name\": \"Save to Database\",\n        \"step_action\": {\n          \"class\": \"QueryDatabase2\",\n          \"database\": {\n            \"name\": \"Database\"\n          },\n          \"sql\": \"INSERT INTO Data (Column1, Column7) VALUES (?, ?)\",\n          \"mappings\": [\n            {\n              \"column\": 1,\n              \"name\": \"Column1\"\n            },\n            {\n              \"column\": 2,\n              \"name\": \"Column7\"\n            }\n          ]\n        },\n        \"enabled\": true\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": 1,\n        \"to\": 2\n      },\n      {\n        \"from\": 2,\n        \"to\": 3\n      },\n      {\n        \"from\": 3,\n        \"to\": 4\n      },\n      {\n        \"from\": 4,\n        \"to\": 5\n      },\n      {\n        \"from\": 5,\n        \"to\": 6\n      }\n    ]\n  },\n  {\n    \"varTypes\": []\n  }\n]",
        "xml_robot": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables>  </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        \n        -->\n  <property name=\"variables\" class=\"Variables\">  </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\">  </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\">  </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n",
        "xml_type": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    \n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>",
        "error": null,
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    }
]
[
    {
        "date": "2025-10-15T21:54:08.760186",
        "model": "gemini-2.5-flash",
        "model_source": "Google",
        "query": "\na robot that assigns a to b\n\n",
        "prompt": "\na robot that assigns a to b\n\n",
        "llm_output": "That's a very open-ended but intriguing prompt! \"A robot that assigns a to b\" can mean many things, depending on what \"a\" and \"b\" represent and what kind of \"assignment\" you envision.\n\nTo give you the best answer, I need a little more detail, but let's break down the possibilities and how a \"robot\" (physical or software-based) could achieve them.\n\n**What could \"a\" and \"b\" be?**\n\n1.  **Physical Objects:** 'a' is an item, 'b' is a location, container, or another item.\n2.  **Data/Information:** 'a' is a piece of data (e.g., a file, a record, a value), 'b' is a category, a variable, a recipient, or another data structure.\n3.  **People/Roles:** 'a' is a person or a task, 'b' is a team, a department, a project, or another person.\n4.  **Abstract Concepts:** 'a' is a concept or property, 'b' is something it's being associated with.\n\n**What kind of \"assignment\" could it be?**\n\n*   **Physical Placement:** Moving 'a' to 'b'.\n*   **Association/Linking:** Establishing a relationship between 'a' and 'b'.\n*   **Categorization/Classification:** Placing 'a' into the group 'b'.\n*   **Value Assignment:** Setting the value of 'a' to 'b' (like in programming: `a = b`).\n*   **Responsibility/Ownership:** Granting 'b' control or responsibility over 'a'.\n\n---\n\nLet's explore some scenarios for a \"robot that assigns a to b\":\n\n### Scenario 1: Physical Robot - Assigning Physical Objects\n\n**Example:** A factory robot that assigns components to products.\n*   **'a' = A specific component (e.g., a screw, a circuit board).**\n*   **'b' = A product assembly or a specific location on it.**\n*   **Assignment:** The robot physically places component 'a' onto/into product 'b'.\n\n**How it would work:**\n1.  **Sensing:** Computer vision (cameras) or sensors to identify 'a' and 'b'.\n2.  **Manipulation:** Robotic arm with grippers or specialized end-effectors to pick up 'a'.\n3.  **Navigation/Precision:** Software to guide the arm to the correct position of 'b' and precisely place 'a'.\n4.  **Control System:** Coordinates all movements and ensures safety.\n\n### Scenario 2: Software Robot (Bot/Automation Script) - Assigning Data/Information\n\n**Example A:** A customer service bot assigning support tickets.\n*   **'a' = A new support ticket.**\n*   **'b' = An available customer service agent or a specific department.**\n*   **Assignment:** The bot reads the ticket details, determines the best agent/department based on rules (e.g., issue type, agent availability, language), and assigns the ticket to 'b' in a ticketing system.\n\n**Example B:** A data processing bot classifying information.\n*   **'a' = An incoming email or document.**\n*   **'b' = A category (e.g., \"Invoice\", \"Complaint\", \"Sales Lead\") or a specific folder/database entry.**\n*   **Assignment:** The bot uses Natural Language Processing (NLP) or keyword matching to analyze the content of 'a' and automatically assigns it to category 'b', often moving the file or updating a database field.\n\n**How it would work:**\n1.  **Integration:** Connects to various software systems (email, CRM, databases, file systems) via APIs.\n2.  **Processing Logic:** Contains rules, algorithms, or even AI/ML models to interpret 'a' and decide on 'b'.\n3.  **Action:** Executes commands within the connected systems to perform the assignment (e.g., update a field, move a record, send a notification).\n\n### Scenario 3: Software Robot (Workflow Automation) - Assigning Roles/Responsibilities\n\n**Example:** An HR bot assigning new employees to teams/projects.\n*   **'a' = A new employee record.**\n*   **'b' = A specific team, department, or project.**\n*   **Assignment:** Based on onboarding data (role, skills, start date), the bot automatically assigns the new employee 'a' to the appropriate team 'b' in the HR system, sends notifications, and potentially sets up access permissions.\n\n**How it would work:**\n1.  **Trigger:** An event (e.g., \"new employee hired\" status update) initiates the bot.\n2.  **Data Retrieval:** Gathers necessary information about 'a' from HR systems.\n3.  **Decision Logic:** Applies predefined rules or uses a decision matrix to determine 'b'.\n4.  **Execution:** Updates HR databases, sends emails, creates tasks in project management tools, or interacts with other systems to complete the assignment.\n\n---\n\n**To help me narrow down the \"robot that assigns a to b\" for you, please tell me:**\n\n*   **What are 'a' and 'b' specifically?** (Are they physical objects, pieces of data, people, tasks?)\n*   **What kind of \"assignment\" are you thinking of?** (Physical placement, categorization, linking, value assignment, responsibility?)\n*   **What is the overall goal or context?** (E.g., \"I need a robot to sort parts,\" or \"I need a bot to manage support tickets.\")",
        "xml_robot": null,
        "xml_type": null,
        "error": null,
        "templates": null
    },
    {
        "date": "2025-10-15T21:59:33.681479",
        "model": "gemini-2.5-flash",
        "model_source": "Google",
        "query": "\na robot that assigns a to b\n\n",
        "prompt": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nRobot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: A ROBOT THAT ASSIGNS A TO BOutput ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "llm_output": "```json\n[\n  {\n    \"variables\": [\n      {\n        \"id\": 1,\n        \"name\": \"A\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 2,\n        \"name\": \"B\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"complexVariables\": [],\n    \"steps\": [\n      {\n        \"id\": 1,\n        \"name\": \"Initialize Variable A\",\n        \"step_action\": {\n          \"class\": \"AssignVariable\",\n          \"assignment_type\": \"value\",\n          \"value\": \"Initial Value for A\"\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Assign A to B\",\n        \"step_action\": {\n          \"class\": \"AssignVariable\",\n          \"assignment_type\": \"expression\",\n          \"value\": \"@{A}\"\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 3,\n        \"class\": \"End\",\n        \"name\": \"End Process\"\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": 1,\n        \"to\": 2\n      },\n      {\n        \"from\": 2,\n        \"to\": 3\n      }\n    ]\n  },\n  {\n    \"varTypes\": []\n  }\n]\n```",
        "xml_robot": null,
        "xml_type": null,
        "error": null,
        "templates": null
    },
    {
        "date": "2025-10-15T22:02:33.254555",
        "model": "gemini-2.5-flash",
        "model_source": "Google",
        "query": "\na robot that assigns a to b\n\n",
        "prompt": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nRobot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: A ROBOT THAT ASSIGNS A TO BOutput ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "llm_output": "```json\n[\n  {\n    \"variables\": [\n      {\n        \"id\": 1,\n        \"name\": \"VarA\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 2,\n        \"name\": \"VarB\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"complexVariables\": [],\n    \"steps\": [\n      {\n        \"id\": 10,\n        \"name\": \"Initialize VarA\",\n        \"step_action\": {\n          \"class\": \"AssignVariable\",\n          \"assignment_type\": \"value\",\n          \"value\": \"Hello from A\",\n          \"output\": {\n            \"idref\": 1\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 20,\n        \"name\": \"Assign A to B\",\n        \"step_action\": {\n          \"class\": \"AssignVariable\",\n          \"assignment_type\": \"expression\",\n          \"value\": \"VarA\",\n          \"output\": {\n            \"idref\": 2\n          }\n        },\n        \"enabled\": true\n      },\n      {\n        \"id\": 30,\n        \"class\": \"End\",\n        \"name\": \"End Workflow\"\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": 10,\n        \"to\": 20\n      },\n      {\n        \"from\": 20,\n        \"to\": 30\n      }\n    ]\n  },\n  {\n    \"varTypes\": []\n  }\n]\n```",
        "xml_robot": null,
        "xml_type": null,
        "error": "JSON Parsing Error: The 'content' from the language model was not valid JSON.",
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    },
    {
        "date": "2025-10-15T22:05:13.240275",
        "model": "gemini-2.5-flash",
        "model_source": "Google",
        "query": "\na robot that assigns a to b\n\n",
        "prompt": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nRobot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: A ROBOT THAT ASSIGNS A TO BOutput ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "llm_output": "```json\n[\n  {\n    \"complexVariables\": [],\n    \"variables\": [\n      {\n        \"id\": 1,\n        \"name\": \"VariableA\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": 2,\n        \"name\": \"VariableB\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"steps\": [\n      {\n        \"id\": \"step_init_a\",\n        \"name\": \"Initialize VariableA\",\n        \"step_action\": {\n          \"class\": \"AssignVariable\",\n          \"assignment_type\": \"value\",\n          \"value\": \"Hello RPA\"\n        },\n        \"target_variable_idref\": 1,\n        \"enabled\": true\n      },\n      {\n        \"id\": \"step_assign_a_to_b\",\n        \"name\": \"Assign A to B\",\n        \"step_action\": {\n          \"class\": \"AssignVariable\",\n          \"assignment_type\": \"expression\",\n          \"value\": \"VariableA\"\n        },\n        \"target_variable_idref\": 2,\n        \"enabled\": true\n      },\n      {\n        \"id\": \"step_end\",\n        \"class\": \"End\"\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": \"step_init_a\",\n        \"to\": \"step_assign_a_to_b\"\n      },\n      {\n        \"from\": \"step_assign_a_to_b\",\n        \"to\": \"step_end\"\n      }\n    ]\n  },\n  {\n    \"varTypes\": []\n  }\n]\n```",
        "xml_robot": null,
        "xml_type": null,
        "error": "JSON Parsing Error: The 'content' from the language model was not valid JSON.",
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    },
    {
        "date": "2025-10-15T22:08:00.504408",
        "model": "gemini-2.5-flash",
        "model_source": "Google",
        "query": "\na robot that assigns a to b\n\n",
        "prompt": null,
        "llm_output": null,
        "xml_robot": null,
        "xml_type": null,
        "error": "Error loading prompt files: One or more prompt component files are empty.",
        "templates": null
    },
    {
        "date": "2025-10-15T22:09:00.478440",
        "model": "gemini-2.5-flash",
        "model_source": "Google",
        "query": "\na robot that assigns a to b\n\n",
        "prompt": null,
        "llm_output": null,
        "xml_robot": null,
        "xml_type": null,
        "error": "Error loading prompt files: One or more prompt component files are empty.",
        "templates": null
    },
    {
        "date": "2025-10-15T22:13:59.450520",
        "model": "gemini-2.5-flash",
        "model_source": "Google",
        "query": "\na robot that assigns a to b\n\n",
        "prompt": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nFew-shot example:\nInput description: \"Robot opens an excel and loops through the rows.\"\nOutput JSON array:\n[\n{\n\"robot_name\": \"Excel_Extract_to_Database_Robot\",\n\"type_ids\": {\n\"excel\": 150,\n\"integer\": 7,\n\"short_text\": 12,\n\"number\": 4\n},\n\"variables\": [\n{\n\"id\": \"var_1\",\n\"name\": \"ExcelFilePath\",\n\"type_id\": 12,\n\"is_complex\": false\n},\n{\n\"id\": \"var_2\",\n\"name\": \"InputExcel\",\n\"type_id\": 150,\n\"is_complex\": false\n},\n{\n\"id\": \"var_3\",\n\"name\": \"CellValue\",\n\"type_id\": 12,\n\"is_complex\": false\n},\n{\n\"id\": \"var_4\",\n\"name\": \"DatabaseConnection\",\n\"type_id\": 12,\n\"is_complex\": false\n}\n],\n\"steps\": [\n{\n\"id\": \"step_1_load\",\n\"name\": \"Load_Excel_File\",\n\"class\": \"LoadFile\",\n\"step_action\": {\n\"class\": \"LoadFile\",\n\"fileNameExpression\": \"{{ ExcelFilePath }}\",\n\"output\": \"var_2\"\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_2_open\",\n\"name\": \"Open_Excel\",\n\"class\": \"OpenVariable\",\n\"step_action\": {\n\"class\": \"OpenVariable\",\n\"variable\": {\n\"idref\": \"var_2\"\n}\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_3_extract\",\n\"name\": \"Extract_First_Cell\",\n\"class\": \"ExtractCell\",\n\"step_action\": {\n\"class\": \"ExtractCell\",\n\"output\": \"var_3\"\n},\n\"element_finders\": {\n\"type\": \"specified_range\",\n\"range\": \"A1\",\n\"column_type\": \"by_index\",\n\"column_value\": \"1\",\n\"row_type\": \"by_index\",\n\"row_value\": \"1\"\n},\n\"enabled\": \"true\"\n},\n\n{\n\"id\": \"step_2_5\",\n\"name\": \"Loop_Through_Rows\",\n\"class\": \"LoopInExcel\",\n\"step_action\": {\n\"class\": \"LoopInExcel\"\n},\n\"element_finders\": {\n\"type\": \"specified_range\",\n\"range\": \"A1:A10\",\n\"offset\": 0\n},\n\"enabled\": \"true\"\n},\n\n\n{\n\"id\": \"step_4_insert\",\n\"name\": \"Insert_to_Database\",\n\"class\": \"QueryDatabase2\",\n\"step_action\": {\n\"class\": \"QueryDatabase2\",\n\"database\": {\n\"idref\": \"var_4\"\n},\n\"sql\": \"INSERT INTO extracted_data (cell_value) VALUES ({{ CellValue }})\",\n\"mappings\": []\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_5_end\",\n\"name\": \"End\",\n\"class\": \"End\"\n}\n],\n\"edges\": [\n{\n\"from\": \"step_1_load\",\n\"to\": \"step_2_open\"\n},\n{\n\"from\": \"step_2_open\",\n\"to\": \"step_n_loop\"\n},\n{\n\"from\": \"step_n_loop\",\n\"to\": \"step_3_extract\"\n},\n{\n\"from\": \"step_3_extract\",\n\"to\": \"step_4_insert\"\n},\n{\n\"from\": \"step_4_insert\",\n\"to\": \"step_5_end\"\n}\n]\n},\n{}  // Empty types if no complex needed\n]Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: A ROBOT THAT ASSIGNS A TO BOutput ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "llm_output": "```json\n[\n  {\n    \"robot_name\": \"Assign_Variable_A_to_B\",\n    \"type_ids\": {\n      \"excel\": 150,\n      \"integer\": 7,\n      \"short_text\": 12,\n      \"number\": 4\n    },\n    \"variables\": [\n      {\n        \"id\": \"var_A\",\n        \"name\": \"VariableA\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": \"var_B\",\n        \"name\": \"VariableB\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"steps\": [\n      {\n        \"id\": \"step_1_assign\",\n        \"name\": \"Assign_Variable_A_to_B\",\n        \"class\": \"AssignVariable\",\n        \"step_action\": {\n          \"class\": \"AssignVariable\",\n          \"assignment_type\": \"expression\",\n          \"value\": \"{{ VariableA }}\",\n          \"output\": \"var_B\"\n        },\n        \"enabled\": \"true\"\n      },\n      {\n        \"id\": \"step_2_end\",\n        \"name\": \"End_Robot\",\n        \"class\": \"End\"\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": \"step_1_assign\",\n        \"to\": \"step_2_end\"\n      }\n    ]\n  },\n  {}\n]\n```",
        "xml_robot": null,
        "xml_type": null,
        "error": "JSON Parsing Error: The 'content' from the language model was not valid JSON.",
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    },
    {
        "date": "2025-10-15T22:16:47.568977",
        "model": "gemini-2.5-flash",
        "model_source": "Google",
        "query": "a robot that assigns a to b\n",
        "prompt": "You are an expert in generating valid JSON data that perfectly fits Jinja2 templates for robot automation. Your task is to create a JSON array with exactly two objects: [robot_json, types_json]. The first JSON populates the robot template to create a meaningful robot workflow based on the description. The second JSON populates the types template for any complex types needed.\n\nStep-by-step reasoning (do this internally before outputting):\n1. Analyze the robot description (e.g., variables, actions, flows).\n2. Map to robot JSON structure: Include keys like 'variables' (array of objects with id, name, type_id, is_complex, type_name if complex), 'complexVariables' if needed, 'steps' (array of objects with id, name, step_action {class, ...}, enabled, etc.), 'edges' (array of {from, to}).\n3. Use only valid type_ids: {'excel': 150, 'integer': 7, 'short_text': 12, 'number': 4}.\n4. For complex types, define them in the second JSON with 'varTypes' (array of {Name, TypeID, TypeText}).\n5. Ensure steps use correct classes (e.g., 'AssignVariable', 'LoadFile', 'ExtractCell') and match the description logically.\n6. Define edges to connect steps in a coherent flow.\n7. Validate: JSON must render valid template output without errors; make it meaningful (e.g., variable names descriptive, values realistic).\n8. Make sure to not use \"<\" and \">\" as they can confuse the XML parser. Don't use any characters that can confuse an XML parser.\nFew-shot example:\nInput description: \"Robot opens an excel and loops through the rows.\"\nOutput JSON array:\n[\n{\n\"robot_name\": \"Excel_Extract_to_Database_Robot\",\n\"type_ids\": {\n\"excel\": 150,\n\"integer\": 7,\n\"short_text\": 12,\n\"number\": 4\n},\n\"variables\": [\n{\n\"id\": \"var_1\",\n\"name\": \"ExcelFilePath\",\n\"type_id\": 12,\n\"is_complex\": false\n},\n{\n\"id\": \"var_2\",\n\"name\": \"InputExcel\",\n\"type_id\": 150,\n\"is_complex\": false\n},\n{\n\"id\": \"var_3\",\n\"name\": \"CellValue\",\n\"type_id\": 12,\n\"is_complex\": false\n},\n{\n\"id\": \"var_4\",\n\"name\": \"DatabaseConnection\",\n\"type_id\": 12,\n\"is_complex\": false\n}\n],\n\"steps\": [\n{\n\"id\": \"step_1_load\",\n\"name\": \"Load_Excel_File\",\n\"class\": \"LoadFile\",\n\"step_action\": {\n\"class\": \"LoadFile\",\n\"fileNameExpression\": \"{{ ExcelFilePath }}\",\n\"output\": \"var_2\"\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_2_open\",\n\"name\": \"Open_Excel\",\n\"class\": \"OpenVariable\",\n\"step_action\": {\n\"class\": \"OpenVariable\",\n\"variable\": {\n\"idref\": \"var_2\"\n}\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_3_extract\",\n\"name\": \"Extract_First_Cell\",\n\"class\": \"ExtractCell\",\n\"step_action\": {\n\"class\": \"ExtractCell\",\n\"output\": \"var_3\"\n},\n\"element_finders\": {\n\"type\": \"specified_range\",\n\"range\": \"A1\",\n\"column_type\": \"by_index\",\n\"column_value\": \"1\",\n\"row_type\": \"by_index\",\n\"row_value\": \"1\"\n},\n\"enabled\": \"true\"\n},\n\n{\n\"id\": \"step_2_5\",\n\"name\": \"Loop_Through_Rows\",\n\"class\": \"LoopInExcel\",\n\"step_action\": {\n\"class\": \"LoopInExcel\"\n},\n\"element_finders\": {\n\"type\": \"specified_range\",\n\"range\": \"A1:A10\",\n\"offset\": 0\n},\n\"enabled\": \"true\"\n},\n\n\n{\n\"id\": \"step_4_insert\",\n\"name\": \"Insert_to_Database\",\n\"class\": \"QueryDatabase2\",\n\"step_action\": {\n\"class\": \"QueryDatabase2\",\n\"database\": {\n\"idref\": \"var_4\"\n},\n\"sql\": \"INSERT INTO extracted_data (cell_value) VALUES ({{ CellValue }})\",\n\"mappings\": []\n},\n\"enabled\": \"true\"\n},\n{\n\"id\": \"step_5_end\",\n\"name\": \"End\",\n\"class\": \"End\"\n}\n],\n\"edges\": [\n{\n\"from\": \"step_1_load\",\n\"to\": \"step_2_open\"\n},\n{\n\"from\": \"step_2_open\",\n\"to\": \"step_n_loop\"\n},\n{\n\"from\": \"step_n_loop\",\n\"to\": \"step_3_extract\"\n},\n{\n\"from\": \"step_3_extract\",\n\"to\": \"step_4_insert\"\n},\n{\n\"from\": \"step_4_insert\",\n\"to\": \"step_5_end\"\n}\n]\n},\n{}  // Empty types if no complex needed\n]Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\nTypes Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>Now, for this description: A ROBOT THAT ASSIGNS A TO BOutput ONLY a valid JSON array like [robot_json, types_json]. No explanations, no extra text. Ensure perfect JSON syntax.",
        "llm_output": "```json\n[\n  {\n    \"robot_name\": \"Assign_Variable_A_to_Variable_B_Robot\",\n    \"type_ids\": {\n      \"excel\": 150,\n      \"integer\": 7,\n      \"short_text\": 12,\n      \"number\": 4\n    },\n    \"variables\": [\n      {\n        \"id\": \"var_A\",\n        \"name\": \"VariableA\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      },\n      {\n        \"id\": \"var_B\",\n        \"name\": \"VariableB\",\n        \"type_id\": 12,\n        \"is_complex\": false\n      }\n    ],\n    \"steps\": [\n      {\n        \"id\": \"step_assign_A_to_B\",\n        \"name\": \"Assign_Variable_A_to_Variable_B\",\n        \"class\": \"AssignVariable\",\n        \"step_action\": {\n          \"class\": \"AssignVariable\",\n          \"output\": \"var_B\",\n          \"assignment_type\": \"expression\",\n          \"value\": \"{{ var_A }}\"\n        },\n        \"enabled\": \"true\"\n      },\n      {\n        \"id\": \"step_end\",\n        \"name\": \"End\",\n        \"class\": \"End\"\n      }\n    ],\n    \"edges\": [\n      {\n        \"from\": \"step_assign_A_to_B\",\n        \"to\": \"step_end\"\n      }\n    ]\n  },\n  {}\n]\n```",
        "xml_robot": null,
        "xml_type": null,
        "error": "JSON Parsing Error: The 'content' from the language model was not valid JSON.",
        "templates": {
            "robot_template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<object class=\"Robot\" serializationversion=\"2\">\n  <prologue>\n    <saved-by-versions>\n      <version>11.3.0.1</version>\n    </saved-by-versions>\n    <file-type>robot</file-type>\n    <referenced-types />\n    <triggers />\n    <sub-robots />\n    <device-mappings />\n    <comment />\n    <tags />\n    <referenced-snippets />\n    <typed-variables> {% for complexVar in complexVariables %} <typed-variable name= {{complexVar.name}}\n        type-name= {{complexVar.name}} /> {% endfor %} </typed-variables>\n    <parameters />\n    <return-variables />\n    <store-in-database-variables />\n    <browser-engine>WEBKIT</browser-engine>\n  </prologue>\n  <!--\n        {% set type_ids = {\n        'excel': 150,\n        'integer': 7,\n        'short_text': 12,\n        'number': 4\n    } %}\n        -->\n  <property name=\"variables\" class=\"Variables\"> {% for var in variables %} <object\n      class=\"Variable\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\" id=\"{{ var.id }}\">{{ var.name }}</property>\n      <property name=\"initialAssignment\" class=\"InitialVariableAssignment\"> {% if var.is_complex %} <property\n          name=\"type\" class=\"TypeReference\" serializationversion=\"0\">\n          <property name=\"typeName\" class=\"String\">{{ var.type_name }}</property>\n        </property>\n    {% else %} <property name=\"type\" class=\"SimpleTypeReference\">\n          <property name=\"simpleTypeId\" class=\"Integer\">{{ var.type_id }}</property>\n        </property>\n    {% endif %} </property>\n    </object> {% endfor %} </property>\n\n  <property name=\"proxyServerConfiguration\" class=\"ProxyServerConfiguration\"\n    serializationversion=\"0\" />\n  <property name=\"httpClientType\" class=\"HttpClientType\">\n    <property name=\"enum-name\" class=\"String\">WEBKIT</property>\n  </property>\n  <property name=\"ntlmAuthentication\" class=\"NTLMAuthenticationType\">\n    <property name=\"enum-name\" class=\"String\">STANDARD</property>\n  </property>\n  <property name=\"usePre96DefaultWaiting\" class=\"Boolean\" id=\"1\">false</property>\n  <property name=\"maxWaitForTimeout\" class=\"Integer\">10000</property>\n  <property name=\"waitRealTime\" idref=\"1\" />\n  <property name=\"privateHTTPCacheEnabled\" class=\"Boolean\" id=\"2\">true</property>\n  <property name=\"privateHTTPCacheSize\" class=\"Integer\">2048</property>\n  <property name=\"comment\">\n    <null />\n  </property>\n  <property name=\"tags\" class=\"RobotTagList\" />\n  <property name=\"humanProcessingTime\">\n    <null />\n  </property>\n  <property name=\"executionMode\" class=\"ExecutionMode\">\n    <property name=\"enum-name\" class=\"String\">FULL</property>\n  </property>\n  <property name=\"avoidExternalReExecution\" idref=\"1\" />\n\n  <property name=\"transitionGraph\" class=\"Body\">\n    <blockBeginStep class=\"BlockBeginStep\" id=\"block_begin\" />\n    <steps class=\"ArrayList\"> {% for step in steps %} {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"AssignVariable\" serializationversion=\"4\"> <!-- Use\n                dictionary to reduce mismatch? --> {%if\n      step.step_action.assignment_type == \"expression\"%} <property name=\"stringExpr\"\n            class=\"Expression\" serializationversion=\"1\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"value\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n            <property name=\"text\" class=\"String\">{{ step.step_action.value }}</property>\n          </property>\n      {% elif step.step_action.assignment_type == \"converters\" %} <property name=\"stringExpr\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.StringProcessorsExpression\">\n            <property name=\"dataConverters\" class=\"DataConverters\">\n              {% for converter in converters %}\n              {{converter(converter.type, converter.value)}}\n              {% endfor %}\n            </property>\n          </property>\n      {% endif %} </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{step.enabled}}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.class == \"End\" %} <object class=\"End\" id=\"{{ step.id }}\" /> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"OpenVariable\">\n          <property name=\"variable\"\n            class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if\n      step.step_action.variable.idref %} <property name=\"name\"\n              idref=\"{{ step.step_action.variable.idref }}\" /> {% else %} <property\n              name=\"name\"\n              class=\"String\">{{ step.step_action.variable.name }}</property> {% endif %} </property>\n        </property>\n            <property\n          name=\"elementFinders\" class=\"ElementFinders\" />\n            <property name=\"errorHandler\"\n          class=\"ErrorHandler\" serializationversion=\"0\" />\n            <property name=\"comment\">\n          <null />\n        </property> {% if step.enabled_idref %} <property\n          name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property name=\"enabled\"\n          class=\"Boolean\">{{\n          step.enabled }}</property> {% endif %} <property name=\"changedProperties\"\n          class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %} <object\n        class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n            <property\n          name=\"stepAction\"\n          class=\"CallRobot2Step\" serializationversion=\"0\">\n          <property name=\"robot2Name\" class=\"String\">{{ step.step_action.robot2_name }}</property>\n          <property name=\"returnVariables\" class=\"ReturnVariableBeanList\"> {% for rv in\n      step.step_action.return_variables %} <object\n              class=\"kapow.robot.plugin.common.stepaction.rl2.ReturnVariable\">\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if rv.idref %} <property\n                  name=\"name\" idref=\"{{ rv.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ rv.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n            <property name=\"elementFinders\"\n          class=\"ElementFinders\" /> {% if step.error_handler %} <property\n          name=\"errorHandler\" class=\"ErrorHandler\"\n          serializationversion=\"0\">\n\n          <property name=\"reportingViaAPI\" class=\"Boolean\">{{\n            step.error_handler.reporting_via_api |\n            default(false) | lower }}</property>\n            <property name=\"reportingViaLog\"\n            class=\"Boolean\">{{\n            step.error_handler.reporting_via_log | default(false) | lower }}</property> {% if\n      step.error_handler.control_flow %} <property name=\"controlFlow\"\n            class=\"{{ step.error_handler.control_flow }}\" /> {% endif %} </property> {% endif %} <property\n          name=\"comment\"\n          class=\"String\">{% if step.comment is not none %} {{step.comment }} {% else %} <null /> {%\n      endif %} </property> {% if step.enabled_idref %} <property name=\"enabled\"\n          idref=\"{{ step.enabled_idref }}\" /> {% else %} <property\n          name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property> {% endif %} <property\n          name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %} {% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"ExtractCell\" />\n        <property name=\"elementFinders\" class=\"ElementFinders\">\n          <object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n      %} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n              <property name=\"range\"\n                class=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n                <property name=\"value\" class=\"String\">{{ step.element_finders.range\n                  }}</property>\n              </property>\n              <property name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type\n      == \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% elif\n      step.element_finders.type == \"named_range\" %} <property name=\"detail\"\n              class=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\n                name=\"rangeName\" class=\"ElementName\">\n                <property name=\"name\" class=\"String\">{{\n                  step.element_finders.range_name }}</property>\n              </property> {% endif %} <property\n                name=\"usage\" class=\"CellFromRange\"> {% if step.element_finders.column_type ==\n      \"by_index\" %} <property name=\"columnId\"\n                  class=\"ByIndexExcelColumnId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.column_type == \"by_header\" %} <property name=\"columnId\"\n                  class=\"ByHeaderExcelColumnId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.column_value }}</property>\n                  </property>\n                </property>\n      {% endif %} {% if step.element_finders.row_type == \"by_index\" %} <property name=\"rowId\"\n                  class=\"ByIndexExcelRowId\">\n                  <property name=\"offset\"\n                    class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n                    <property name=\"value\" class=\"Integer\">{{\n                      step.element_finders.row_value }}</property>\n                  </property>\n                </property>\n      {% elif step.element_finders.row_type == \"by_header\" %} <property name=\"rowId\"\n                  class=\"ByHeaderExcelRowId\">\n                  <property name=\"headerPattern\"\n                    class=\"kapow.robot.plugin.common.support.expression.stringexpr.PatternValueStringExpression\">\n                    <property name=\"value\" class=\"String\">{{\n                      step.element_finders.row_value }}</property>\n                  </property> {%\n      if step.element_finders.row_range_name %} <property name=\"headerRangeName\"\n                    class=\"ElementName\">\n                    <property name=\"name\" class=\"String\">{{\n                      step.element_finders.row_range_name }}</property>\n                  </property>\n      {% endif %} </property> {% endif %} </property>\n            </property> {% endif %} </object>\n        </property>\n\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %} <object\nclass=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n<property name=\"name\" class=\"String\">{{ step.name }}</property>\n<property name=\"stepAction\" class=\"LoopInExcel\">\n<property name=\"loopDirection\" class=\"LoopInExcel$LoopDirection\">\n<property name=\"enum-name\" class=\"String\">ROWS</property>\n</property>\n</property>\n<property name=\"elementFinders\" class=\"ElementFinders\">\n<object class=\"ExcelElementFinder\"> {% if step.element_finders.type == \"specified_range\"\n%} <property name=\"detail\" class=\"SpecifiedRangeCellFinderDetail\">\n<property name=\"range\"\nclass=\"kapow.robot.plugin.common.support.expression.stringexpr.ValueStringExpression\">\n<property name=\"value\" class=\"String\">{{ step.element_finders.range\n}}</property>\n</property>\n<property name=\"usage\" class=\"RowFromRange\">\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>\n</property>\n{% elif step.element_finders.type == \"named_range\" %} <property name=\"detail\"\nclass=\"NamedRangeCellFinderDetail\"> {% if step.element_finders.range_name %} <property\nname=\"rangeName\" class=\"ElementName\">\n<property name=\"name\" class=\"String\">{{\nstep.element_finders.range_name }}</property>\n</property> {% endif %} <property\nname=\"usage\" class=\"{{ step.element_finders.usage }}\">{% if step.element_finders.usage == \"RowFromRange\" %}\n<property name=\"rowId\" class=\"ByIndexExcelRowId\">\n<property name=\"offset\" class=\"kapow.robot.plugin.common.support.expression.integerexpr.ValueIntegerExpression\">\n<property name=\"value\" class=\"Integer\">{{ step.element_finders.offset | default('0') }}</property>\n</property>\n</property>\n</property>{% endif %}</property>\n</property> {%\nendif %} </object>\n</property>\n<property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\" />\n<property name=\"comment\">\n<null />\n</property>\n<property name=\"enabled\" class=\"Boolean\">{{ step.enabled | lower }}</property>\n<property name=\"changedProperties\" class=\"java.util.HashSet\" />\n</object> {% endif %}\n      {% if step.class == \"Try\" %} <object class=\"Try\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"comment\" class=\"String\">{{ step.comment }}</property>\n      </object> {%\n      endif %} {% if step.class == \"BranchPoint\" %} <object class=\"BranchPoint\"\n        id=\"{{ step.id }}\" /> {% endif %} {% if step.step_action is defined and\n      step.step_action.class == \"QueryDatabase2\" %} <object class=\"Transition\"\n        serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"name\" class=\"String\">{{ step.name }}</property>\n        <property name=\"stepAction\" class=\"QueryDatabase2\" serializationversion=\"2\">\n          <property name=\"databaseName\"\n            class=\"kapow.robot.plugin.common.support.expression.stringexpr.DBNameValueStringExpression\">\n            <property name=\"value\" class=\"kapow.util.db.DBName\"> {% if\n      step.step_action.database.idref %} <property name=\"name\"\n                idref=\"{{ step.step_action.database.idref }}\" /> {% else %} <property\n                name=\"name\"\n                class=\"String\">{{ step.step_action.database.name }}</property> {% endif %} </property>\n          </property>\n          <property name=\"sql\" class=\"String\">{{ step.step_action.sql }}</property>\n          <property name=\"columnAttributeMappings\"\n            class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMappings\"> {% for\n      mapping in step.step_action.mappings %} <object\n              class=\"kapow.robot.plugin.common.support.database.ColumnAttributeMapping\">\n              <property name=\"columnName\" class=\"String\">{{ mapping.column }}</property>\n              <property name=\"attributeName\"\n                class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if mapping.idref %} <property\n                  name=\"name\" idref=\"{{ mapping.idref }}\" /> {% else %} <property\n                  name=\"name\"\n                  class=\"String\">{{ mapping.name }}</property> {% endif %} </property>\n            </object>\n      {% endfor %} </property>\n        </property>\n        <property name=\"elementFinders\" class=\"ElementFinders\" />\n        <property name=\"errorHandler\" class=\"ErrorHandler\" serializationversion=\"0\">\n          <property name=\"changedProperties\" class=\"java.util.HashSet\">\n            <element class=\"String\">reportingViaAPI</element>\n            <element class=\"String\">reportingViaLog</element>\n          </property>\n          <property name=\"reportingViaAPI\" class=\"Boolean\">false</property>\n          <property name=\"reportingViaLog\" class=\"Boolean\">false</property>\n        </property>\n        <property name=\"comment\">\n          <null />\n        </property>\n        <property name=\"enabled\" class=\"Boolean\">true</property>\n        <property name=\"changedProperties\" class=\"java.util.HashSet\" />\n      </object> {% endif %}\n      {% if step.step_action is defined and step.step_action.class == \"LoadFile\" %} <object\n        class=\"Transition\" serializationversion=\"3\" id=\"{{ step.id }}\">\n        <property name=\"stepAction\" class=\"LoadFile\">\n          <property name=\"fileNameExpression\"\n            class=\"kapow.robot.plugin.common.support.expression.multipletype.VariableExpression\"\n            serializationversion=\"2\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{\n                step.step_action.fileNameExpression }}</property>\n            </property>\n          </property>\n          <property name=\"output\"\n            class=\"kapow.robot.plugin.common.stateprocessor.rest.ToVariableOutputSpecification\"\n            serializationversion=\"1\">\n            <property name=\"variable\"\n              class=\"kapow.robot.plugin.common.support.AttributeName2\">\n              <property name=\"name\" class=\"String\">{{ step.step_action.output }}</property>\n            </property>\n          </property>\n          <property name=\"browserConfigurationSpecification\"\n            class=\"BrowserConfigurationSpecificationWebKit\" serializationversion=\"27\">\n            <property name=\"ancestorProvider\"\n              class=\"BrowserConfigurationSpecificationAncestorProviderForStep\" />\n          </property>\n        </property>\n      </object>\n      {% endif %} {% endfor %} </steps>\n\n    <blockEndStep class=\"BlockEndStep\" />\n    <edges class=\"ArrayList\"> {% for edge in edges %} <object class=\"TransitionEdge\">\n        <from idref=\"{{ edge.from }}\" />\n        <to idref=\"{{ edge.to }}\" />\n        <name />\n        <comment />\n      </object> {% endfor %} </edges>\n  </property>\n\n  <property name=\"browserConfigurationSpecification\"\n    class=\"BrowserConfigurationSpecificationWebKit\"\n    serializationversion=\"27\" />\n</object>\n{% macro converter(var) %}\n<property name=\"variable\" class=\"kapow.robot.plugin.common.support.AttributeName2\"> {% if var.idref\n  %} <property name=\"name\" idref=\"{{ var.idref }}\" /> {% else %} <property name=\"name\"\n    class=\"String\">{{ var.name }}</property> {% endif %} </property>\n{% endmacro %}",
            "type_template": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n\n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n\n        </property>\n</object>\n",
            "simple_robot_template": "Robot Template:\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n<!--If you want to use any complex variable you made with the other template, you must place a corrosponding complexVar.-->\n{% for complexVar in complexVariables %}\n  {{ var.name }}\n  {{ var.type }}\n{% endfor %}\n\n<!-- These are variables that can be referenced from the rest of the robot either by ID or name. Must have valid type ID if it is a simple type. If it is complex type it must have the valid referances to typed variables.-->\n{% for var in variables %}\n  {{ var.id }}\n  {{ var.name }}\n  {{ var.type_id }}\n  {% if var.is_complex %}\n    {{ var.type_name }}\n  {% else %}\n    {{ var.type_id }}\n  {% endif %}\n{% endfor %}\n\n\n\n\n<!-- These are the steps that the robot takes accoding to the transition rules. Each step can has effects inputs/outputs, they can use and change variables and the state. The state of the robot could be things like viewing an excel or a pdf.-->\n{% for step in steps %}\n<!--This defines Assign variable action, the result of the assignment type evalutation is written into the variable.-->\n  {% if step.step_action is defined and\n      step.step_action.class == \"AssignVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {%if\n      step.step_action.assignment_type == \"expression\"%}\n    {{ step.step_action.value }}\n    {% elif step.step_action.assignment_type == \"value\" %}\n      {{ step.step_action.value }}\n      {% elif step.step_action.assignment_type == \"converters\" %}\n        {% for converter in converters %}\n          {{converter(converter.type, converter.value)}}\n        {% endfor %}\n      {% endif %}\n      {{step.enabled}}\n    {% endif %}\n\n    <!--This marks the end of an execution line in the graph. Nothing else is called in this branch (There can be multiple branches)-->\n\n    {% if step.class == \"End\" %}\n      {{ step.id }}\n    {% endif %}\n\n    <!--This enables opening an excel file given as an excel variable-->\n\n    {% if\n      step.step_action is defined and step.step_action.class == \"OpenVariable\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if\n      step.step_action.variable.idref %}\n    {{ step.step_action.variable.idref }}\n    {% else %}\n    {{ step.step_action.variable.name }}\n  {% endif %}\n  {% if step.enabled_idref %}\n    {{ step.enabled_idref }}\n    {% else %}\n    {{\n      step.enabled }}\n  {% endif %}\n{% endif %}\n\n<!--This calls upon a subrobot, of robot type2 , which is mainly used for browser or desktop automation steps.-->\n\n{% if step.step_action is defined\n      and step.step_action.class == \"CallRobot2Step\" %}\n  {{ step.id }}\n  {{ step.name }}\n  {{ step.step_action.robot2_name }}\n  {% for rv in\n      step.step_action.return_variables %}\n    {% if rv.idref %}\n      {{ rv.idref }}\n      {% else %}\n      {{ rv.name }}\n    {% endif %}\n  {% endfor %}\n  {{ step.error_handler.reporting_via_api |\n      default(false) | lower }}\n  {{\n      step.error_handler.reporting_via_log | default(false) | lower }}\n  {% if\n      step.error_handler.control_flow %}\n  {{ step.error_handler.control_flow }}\n{% endif %}\n{% if step.comment is not none %}\n  {{\n      step.comment }}\n  {% else %}\n{% endif %}\n{% if\n      step.enabled_idref %}\n{{ step.enabled_idref }}\n{% else %}\n{{ step.enabled | lower }}\n{% endif %}\n{% endif %}\n\n<!--This extracts from the given cell a value and writes it into a variable. Finders are used to specify which cell of the currently opened excel to be extracted.-->\n\n{% if\n      step.step_action is defined and step.step_action.class == \"ExtractCell\" %}\n{{ step.id }}\n{{ step.name }}\n{% if step.element_finders.type == \"specified_range\"\n      %}\n  {{ step.element_finders.range }}\n  {% if step.element_finders.column_type\n      == \"by_index\" %}\n    {{ step.element_finders.column_value }}\n    {% elif step.element_finders.column_type == \"by_header\" %}\n      {{ step.element_finders.column_value }}\n    {% endif %}\n    {% if step.element_finders.row_type == \"by_index\" %}\n      {{ step.element_finders.row_value }}\n      {% elif step.element_finders.row_type == \"by_header\" %}\n        {{ step.element_finders.row_value }}\n        {% if step.element_finders.row_range_name %}\n          {{ step.element_finders.row_range_name }}\n        {% endif %}\n      {% endif %}\n      {% elif\n      step.element_finders.type == \"named_range\" %}\n      {% if step.element_finders.range_name %}\n        {{ step.element_finders.range_name }}\n      {% endif %}\n      {% if\n      step.element_finders.column_type == \"by_index\" %}\n      {{ step.element_finders.column_value }}\n      {% elif step.element_finders.column_type == \"by_header\" %}\n        {{ step.element_finders.column_value }}\n      {% endif %}\n      {% if step.element_finders.row_type == \"by_index\" %}\n        {{ step.element_finders.row_value }}\n        {% elif step.element_finders.row_type == \"by_header\" %}\n          {{ step.element_finders.row_value }}\n          {% if step.element_finders.row_range_name %}\n            {{ step.element_finders.row_range_name }}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n      {{ step.enabled | lower }}\n    {% endif %}\n    {% if step.class == \"Try\" %}\n      {{ step.id }}\n      {{ step.name }}\n      {{ step.comment }}\n    {%endif %}\n\n\n    <!-- Loop in excel !-->\n    {% if step.step_action is defined and step.step_action.class == \"LoopInExcel\" %}\n    {{ step.id }}\n    {{ step.name }}\n    {% if step.element_finders.type == \"specified_range\" %}\n    {{ step.element_finders.range }}\n    {% elif step.element_finders.type == \"named_range\" %}\n    {% if step.element_finders.range_name %}\n    {{ step.element_finders.range_name }}\n    {% endif %}\n    {% endif %}\n    {{ step.enabled | lower }}\n    {% endif %}\n\n\n    <!-- BranchPoint !-->\n    {% if step.class == \"BranchPoint\" %}\n      {{ step.id }}\n    {% endif %}\n    <!--This runs an SQL query in a corrected database, and gets the resulting rows to iterate through. For each output row this point of the execution repeats itself. As in after this node, when the execution stops, the next row is loaded into variables as specifed if mappings and then exection starts again from this node.-->\n\n    {% if step.step_action is defined and step.step_action.class == \"QueryDatabase2\"\n      %}\n      {{ step.id }}\n      {{ step.name }}\n      {% if\n      step.step_action.database.idref %}\n      {{ step.step_action.database.idref }}\n      {% else %}\n      {{ step.step_action.database.name }}\n    {% endif %}\n    {{ step.step_action.sql }}\n    {% for\n      mapping in step.step_action.mappings %}\n    {{ mapping.column }}\n    {% if mapping.idref %}\n      {{ mapping.idref }}\n      {% else %}\n      {{ mapping.name }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n<!--This step loads a file from given file name into a variable. Used for reading a downloaded excel into a variable, and then openening that variable to use in cell extract.-->\n\n{% if step.step_action is defined and step.step_action.class == \"LoadFile\" %}\n  {{ step.id }}\n  {{ step.step_action.fileNameExpression }}\n  {{ step.step_action.output }}\n{% endif %}\n{% endfor %}\n{% for edge in edges %}\n  {{ edge.from }}\n  {{ edge.to }}\n{% endfor %}\n\n\n\n{% macro converter(var) %}\n{% if var.idref\n  %}\n  {{ var.idref }}\n  {% else %}\n  {{ var.name }}\n{% endif %}\n{% endmacro %}\n",
            "simple_type_template": "Types Template:\n\n<!--These are type IDs, every variable has a type and one of these numbers must be chosen as type ID-->\n{% set type_ids = {\n  'excel': 150,\n  'integer': 7,\n  'short_text': 12,\n  'number': 4\n} %}\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<object class=\"kapow.robot.common.domain.Type\" serializationversion=\"0\">\n\t<prologue>\n\t\t<saved-by-versions>\n\t\t\t<version>11.4.0.4</version>\n\t\t</saved-by-versions>\n\t\t<file-type>type</file-type>\n\t</prologue>\n\t<property name=\"attributes\" class=\"kapow.robot.common.domain.Attributes\">\n  \n    {%for var in varTypes%}\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\">{{var.Name}}</property>\n      <property name=\"type\" class=\"kapow.robot.plugin.common.domain.StringAttributeType\" id=\"0\"/>\n      <property name=\"recordFieldType\" class=\"String\" id=\"{{var.TypeID}}\">{{var.TypeText}}</property>\n    </object>\n    {% endfor %}\n\n\n    <object class=\"kapow.robot.common.domain.Attribute\" serializationversion=\"1\">\n      <property name=\"name\" class=\"String\"><<+removeSpaces(Settings.CurrentColumnName)+>></property>\n      <property name=\"type\" idref=\"0\"/>\n      <property name=\"recordFieldType\" idref=\"1\"/>\n    </object>\n    \n        </property>\n</object>"
        }
    }
]